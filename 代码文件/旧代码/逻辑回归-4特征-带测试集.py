# -*- codeing = utf-8 -*-
# @Time : 2025/4/16 20:21
# @Author : 星空噩梦
# @File ： 逻辑回归-4特征-带测试集.py
# @Software : PyCharm


import numpy as np
import statsmodels.api as sm

from sklearn.linear_model import LogisticRegression
from sklearn.model_selection import KFold
from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score
from sklearn.decomposition import PCA
from sklearn.preprocessing import StandardScaler

# 假设你已有四个特征，每个是一个长度为120的array
# 这里用随机数代替，实际用你的数据替换即可
first1=[0.9241962407465936, 0.9730153045878215, 1.0535650646483086, 1.365368986133295, 1.1752045970807576, 1.356986344060514, 0.8717833176685523, 1.1058898790247633, 0.9730153045878216, 0.9241962407465936, 0.9760325029430748, 0.9760325029430749, 0.9730153045878215, 1.0782289475376925, 1.2047933096947843, 1.001212594142143, 0.7720108303894594, 1.001212594142143, 1.1843146422534945, 1.001212594142143, 1.2613309956490442, 1.001212594142143, 0.9730153045878216, 0.9760325029430748, 0.984250346592314, 1.0104127537805416, 1.1490421898925305, 0.9410980357245469, 1.0782289475376925, 0.9179365526126058, 1.118941026810968, 1.0575792300677742, 0.9241962407465936, 0.8456209104803251, 0.8717833176685522, 1.1836750456374339, 0.8456209104803251, 1.09140165082336, 0.8092054732283176, 1.1836750456374336, 0.8024685996125578, 0.845620910480325, 1.0104127537805414, 0.6376767563123414, 1.0184387897117868, 1.2648667490341141, 0.7720108303894594, 1.5388340843440491, 1.1124565824765003, 1.0365751609687686, 1.1072982888579452, 1.2904003369692967, 1.1699052597668589, 0.9241962407465936, 0.9210689672752428, 1.0535650646483086, 0.9842503465923143, 0.8944857758183755]
first2=[0.6376767563123413, 0.7541267212531019, 1.0459781656993947, 1.1843146422534945, 1.1740197787861835, 0.9842503465923143, 0.7763061924243304, 0.9395190304653536, 0.9826705714390717, 0.9275918194638559, 1.1921945007602976, 0.8024685996125578, 0.9149356285363196, 0.9410980357245471, 0.941098035724547, 1.1246702892376166, 0.9149356285363197, 0.984250346592314, 0.845620910480325, 0.9410980357245471, 0.8024685996125578, 0.941098035724547, 0.9241962407465936, 0.8456209104803251, 1.0104127537805416, 0.7069914743683361, 0.9842503465923141, 1.3474848769969376, 1.0782289475376925, 0.6811638601415287, 0.9241962407465936, 0.8270895823646751, 0.9842503465923143, 0.7720108303894594, 0.8471798873510441, 0.9179365526126059, 0.9241962407465936, 0.9241962407465936, 1.202284524642632, 0.8449736915010326, 0.6990479692778863, 0.9454759286002136, 0.9053185699915495, 1.0782289475376925, 0.8944857758183753, 0.7701635339554946, 1.3306600933628872, 0.9241962407465936, 0.9410980357245469, 0.8471798873510441, 0.9179365526126059, 0.626085108166313, 1.184314642253495, 1.0380268916676232, 1.0005546805754293, 1.0302819354623955, 0.9241962407465936, 0.5683620382563468, 0.7763061924243304, 1.445185878948082, 0.8944857758183755, 1.0380268916676232]


#加速度头眼互信息
second1=[0.9760325029430748, 0.8471798873510441, 0.6632797510051711, 0.8471798873510441, 0.9097077103274984, 0.9097077103274986, 0.8092054732283175, 0.7362426121167444, 1.0302819354623955, 0.8944857758183755, 1.0380268916676234, 0.9513834940976305, 1.001212594142143, 0.9760325029430749, 1.2141368187614336, 0.9760325029430749, 0.8471798873510441, 0.8129390486936758, 0.8129390486936758, 0.8944857758183755, 0.8944857758183755, 0.8944857758183755, 0.8471798873510441, 0.9513834940976303, 0.7362426121167444, 0.6811638601415286, 0.8270895823646751, 0.9826705714390715, 1.0575792300677744, 0.7701635339554946, 1.001212594142143, 0.7780966989576439, 0.8944857758183754, 0.8367448492159253, 1.1740197787861837, 1.0302819354623955, 0.9000524434762481, 1.0782289475376925, 0.8471798873510441, 0.9241962407465936, 0.6632797510051711, 0.8821683343398906, 0.8821683343398905, 0.7362426121167444, 0.7701635339554946, 0.8471798873510441, 1.001212594142143, 0.9241962407465936, 1.004242473054076, 0.9097077103274984, 1.2514519868915581, 0.8129390486936758, 0.7780966989576439, 0.9252650783927606, 0.8304717124362915, 0.9826705714390715, 0.7362426121167444, 0.7780966989576439]
second2=[0.7362426121167442, 0.6931471805599452, 0.7701635339554946, 0.8129390486936757, 1.001212594142143, 0.8918236011911408, 0.7362426121167442, 0.7763061924243304, 1.001212594142143, 0.7701635339554946, 0.955131195451464, 0.663279751005171, 0.9551311954514639, 0.8367448492159253, 0.663279751005171, 1.020036958401841, 0.6811638601415286, 0.6632797510051711, 0.8821683343398907, 0.7362426121167444, 0.6632797510051712, 0.9826705714390717, 0.7313923215689764, 0.7362426121167444, 0.7183585029803867, 0.6632797510051711, 0.6632797510051711, 0.9241962407465936, 0.8944857758183753, 0.7701635339554946, 0.8944857758183754, 0.8471798873510441, 0.7541267212531019, 0.7701635339554946, 0.8944857758183754, 0.9241962407465936, 0.8944857758183753, 0.8944857758183753, 1.098155281916331, 1.001212594142143, 0.7701635339554946, 0.7701635339554946, 0.8944857758183754, 0.9760325029430748, 0.9513834940976302, 0.8129390486936758, 0.8351977102525223, 0.8129390486936758, 0.8092054732283176, 0.8129390486936758, 0.7701635339554946, 0.8471798873510441, 0.8944857758183754, 0.9276173343271816, 1.001212594142143, 0.9760325029430749, 0.8944857758183755, 0.8092054732283176, 0.6632797510051711, 1.2636544318820966, 1.0380268916676234, 0.9276173343271814]

#广义熵
third1=[0.24972165984443295, 0.2047441294424624, 0.03047416967654091, 0.6746931165822778, 0.11076337736553085, 0.23341867789766232, 0.2537166031849363, 0.6273903387223303, 0.1749474840398871, 0.7599945819467698, 0.20089527892569153, 1.2025042140038729, 1.6898599475320697, 0.19103448349776464, 0.6888410363651325, 0.2240819212890958, 0.3918211808527724, 0.4296356547120696, 0.1910328429062601, 0.31086403614547686, 0.38913449727094473, 0.1816920864025837, 0.38887250095649567, 0.23512492201111151, 0.8402414124476029, 0.5005396805242605, 0.37900774530581066, 1.5658448255410171, 0.9025406019171096, 0.7460314185623221, 0.9108494457121038, 0.6932037434136195, 0.25018766989408997, 0.804951556995988, 0.4604143094447313, 0.40545755573588643, 0.1166700563285829, 0.7034367615153411, 1.7296970340531341, 0.7709244828027606, 0.5903755612485277, 1.40369670371033, 1.7322502680070793, 0.9138435861476734, 1.0952364320758377, 0.09833056169227514, 0.2709111824221231, 0.7809332388952069, 0.43222349156781315, 0.6391336938091566, 0.8666539738023985, 0.4332629850079932, 0.49561877816901095, 1.7914233881934485, 0.4924580735688011, 1.0643086811406668, 1.3253685209356665, 0.4803810296553019]
third2=[1.4494513058442218, 0.8065684353106842, 0.30346596673356613, 0.6767351593002264, 0.5545913580197896, 1.1529167326156597, 0.5555151820233531, 1.5249735977310477, 1.5487847849999812, 1.3940889580830598, 1.4291111483158223, 0.9590427930195667, 0.3118083131433907, 1.066335963916815, 0.4938058438940244, 0.2998097709883633, 0.25922830362621485, 0.42685966115892154, 0.6474465391120412, 0.569961754323222, 0.4639873376954698, 0.7640639937327747, 1.0009983461421725, 1.3113765998470646, 0.9315344588983562, 0.46371338645596105, 1.1507974529090155, 0.36765927666673615, 1.2412884363556114, 1.358369443159525, 1.451596318625435, 0.9502424444697006, 1.5532179918188198, 1.3084096017538867, 1.5159357900750903, 0.966728527973014, 0.2980263929989868, 0.40771237261041293, 0.49694032627285856, 1.2179465317982618, 1.0871082900229487, 1.2100022755219797, 0.13527634974738656, 0.6321591869534112, 1.3164638337924786, 0.6024827113761075, 1.3295875904704262, 1.024703086276257, 1.2560085862349577, 1.1257979302647376, 0.442767833438548, 0.9882998083826459, 1.1144716350818984, 0.07000112009846324, 0.25108811051325036, 1.2850836280893754, 1.0301397914482475, 1.0495043625616178, 0.9057863750745987, 0.08272937348796831, 0.5876171029835178, 0.3805439629257098]

#基础SGE
fourth1=[0.49852348618564224, 0.5279578391166615, 0.12268354096022835, 0.9691574975819941, 0.2861493985284232, 0.5878964923001518, 0.5946574994084305, 0.8756389615630379, 0.3945446839165707, 1.1511900123504222, 0.5193872294717614, 1.4365525507801808, 1.8559197128699079, 0.4186455640432426, 0.9886112882856176, 0.5503308755797172, 0.826603650871921, 0.8143284319930955, 0.5021499955996597, 0.6681616442224102, 0.6908396487002174, 0.4047782480915695, 0.6500869263938048, 0.5416147551794468, 1.1932344792848033, 0.8110025361053572, 0.6610429258481247, 1.904833288839223, 1.2981357194306837, 0.8960027237013213, 1.243827149027955, 0.8684996485508671, 0.6194229360706671, 0.9466109068193388, 0.8749457753693282, 0.7994755433273187, 0.30601912974361223, 0.8965974239331774, 1.8973833258025543, 1.0457964628229663, 1.0470105609775118, 1.5225908055095974, 1.9724423575843648, 1.009529222394789, 1.4987881529437883, 0.27686869285582694, 0.6355731033228627, 1.3365910624176747, 0.9427307436599598, 1.186100383716192, 1.1881544181968866, 0.8191784879374873, 0.7627027618344063, 2.1088792233350775, 1.0465215249661088, 1.2132569621162943, 1.6799706929702203, 1.0449805515984374]
fourth2=[1.637267847742275, 1.3280001736677982, 0.5625045117119263, 1.2471726107531502, 1.1062107095869647, 1.4329436870881267, 1.1516822479326692, 1.8880186625532938, 1.7107167823753917, 1.6856657898331215, 1.5482388861677228, 0.9982103257364935, 0.6397829169819957, 1.318909590278643, 0.8816212095339779, 0.558391605796748, 0.5570485506677776, 0.7534214013530225, 0.8426430301401722, 0.9873957949950698, 0.9786251450940882, 1.1821245832692306, 1.1867205238568366, 1.5584489314245564, 1.2442514384975372, 0.8813127596539225, 1.2921247671518155, 0.8561749475356071, 1.5422103776996725, 1.5924076898232251, 1.8856289481611643, 1.380740616146449, 1.842657730308862, 1.6446824309020727, 1.7585642796121341, 1.5385469385109811, 0.5758946634905077, 0.7868404148736774, 0.7849131771648769, 1.430683756064059, 1.5476630382885856, 1.5609494755263698, 0.3301448111743118, 1.1791103581199651, 1.517684623709279, 0.9554879883512305, 1.6411707842284713, 1.1231734008222984, 1.703493340489444, 1.279323919212311, 0.8996692919911262, 1.4154916751883353, 1.5112330438100092, 0.21675371892890088, 0.6367129843802664, 1.511359212558339, 1.5519613931882816, 1.492580142811422, 1.3084467754033802, 0.2679462397071572, 1.0183793201647986, 0.8493989854732277]

#熵差
fifth1=[ 0.75801204,  0.8623472 ,  0.21684996,  1.22292187,  0.46815196,
        0.95418134,  0.94845496,  1.09130566,  0.62396792,  1.50358857,
        0.85119765,  0.15662759,  0.41474129,  0.65487544,  0.1437326 ,
        0.88472402,  1.3188947 ,  0.36621127,  0.6315972 ,  0.54601037,
        0.99911927,  0.63725995,  0.91740676,  0.79413797,  1.46444417,
        0.7978952 ,  0.9499789 ,  1.11994375,  0.75314823, -0.28522525,
        0.34293317,  0.9819247 , -0.47578605, -0.10346876, -1.2998342 ,
        1.20064516, -0.44903471, -0.07596909,  0.17788328,  0.63500879,
        0.54560798,  0.38047154,  0.23092426,  0.79987363,  0.9831599 ,
        0.46322485,  1.01129857,  1.26276756,  0.70361322,  1.72365018,
        1.40944439,  1.11963807,  0.95691019,  0.52459233,  1.60722168,
        0.60088634,  0.20670272, -0.97480886]
fifth2=[ 0.1575917 ,  0.66618983,  0.83014942,  1.69712516,  1.66158788,
        0.53678806,  0.29956906, -0.59341338,  0.21218486,  0.16503372,
        0.47030914,  0.0029191 , -0.16407043, -0.73768656, -1.06634759,
        0.84939602, -0.49235704,  0.39974112,  0.05287231,  1.39876164,
        1.00492507,  0.86392896,  0.39589829, -0.76996179, -0.31740747,
       -0.35885805, -0.4578434 ,  1.35463507, -0.73843929, -0.1591918 ,
       -0.54351016,  0.00280221,  0.45517702,  1.0028493 ,  0.99182993,
        1.32549847, -0.24551158,  0.82021905,  0.0730257 , -0.26375616,
        0.75488504,  0.77452675,  0.54915483,  1.75980279, -0.39478525,
       -0.3313978 ,  0.33617172,  0.17058523,  0.01094477,  0.32274627,
       -0.02244414,  1.13551608,  0.53700931, -0.36909589,  1.03525252,
        0.24067752,  0.27606243,  0.01115049,  1.00785895,  0.45968335,
        0.84272742, -0.26365655]


first = first1 + first2      # 合并后长度 120
second = second1 + second2   # 合并后长度 120
third = third1 + third2      # 合并后长度 120
fourth = fourth1 + fourth2    # 合并后长度 120
fifth = fifth1 + fifth2      # 合并后长度 120
all=0
X = np.column_stack([first, third, fourth, fifth])  # 原始特征组合

# 标准化
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

# PCA
pca = PCA(n_components=4)
X_pca = pca.fit_transform(X_scaled)

# 只保留前4个主成分
X_total = X_pca[:, :3]  # shape: (120, 4)

# 标签（你原本就有）
y = np.array([0] * 58 + [1] * 62)

# 固定随机种子并打乱数据（确保每次结果一样）
random_state = 39
np.random.seed(random_state)
shuffle_indices = np.random.permutation(len(y))
X_total = X_total[shuffle_indices]
y = y[shuffle_indices]

# 5折交叉验证
kf = KFold(n_splits=5, shuffle=False)  # shuffle 已经手动完成了，不需要再设

acc_list = []
prec_list = []
recall_list = []
f1_list = []

fold = 1
for train_index, test_index in kf.split(X_total):
    X_train, X_test = X_total[train_index], X_total[test_index]
    y_train, y_test = y[train_index], y[test_index]

    # 逻辑回归，L2正则
    model = LogisticRegression(penalty='l2', C=1, solver='liblinear')
    model.fit(X_train, y_train)

    # 预测
    y_test_pred = model.predict(X_test)

    # 各指标
    acc = accuracy_score(y_test, y_test_pred)
    prec = precision_score(y_test, y_test_pred)
    recall = recall_score(y_test, y_test_pred)
    f1 = f1_score(y_test, y_test_pred)

    # 保存
    acc_list.append(acc)
    prec_list.append(prec)
    recall_list.append(recall)
    f1_list.append(f1)

    print(f"Fold {fold}:")
    print(f"  Test Accuracy:  {acc:.4f}")
    print(f"  Test Precision: {prec:.4f}")
    print(f"  Test Recall:    {recall:.4f}")
    print(f"  Test F1-Score:  {f1:.4f}\n")

    fold += 1

# 输出整体平均结果
print("五折交叉验证 - 逻辑回归 结果：")
print(f"平均准确率 (Accuracy):  {np.mean(acc_list):.4f}")
print(f"平均精确率 (Precision): {np.mean(prec_list):.4f}")
print(f"平均召回率 (Recall):    {np.mean(recall_list):.4f}")
print(f"平均F1分数 (F1-Score):   {np.mean(f1_list):.4f}")



